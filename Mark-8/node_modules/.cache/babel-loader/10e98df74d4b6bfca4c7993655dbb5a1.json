{"ast":null,"code":"import _slicedToArray from \"C:/Users/Sarvesh/Desktop/New folder (6)/Neog0/Mark-8/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Sarvesh\\\\Desktop\\\\New folder (6)\\\\Neog0\\\\Mark-8\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\n/**\n * concept notes: styling in react\n */\n\n/**\n * concept of hashmap (object as hashmap)\n * O(1) and why we are doing this.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emojiDictionary = {\n  \"üòä\": \"Smiling\",\n  \"üò≥\": \"disbelief\",\n  \"üòî\": \"sad\",\n  \"ü•°\": \"takeout box\",\n  \"‚ù§Ô∏è\": \"love\",\n  \"üòë\": \"annoyance\"\n  /** add some more to show how the app now expands when there's new data */\n\n};\n/**\n * Bonus feature\n * converting an object to array of keys\n */\n\nconst emojis = Object.keys(emojiDictionary);\nexport default function App() {\n  _s();\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        emoji = _useState2[0],\n        setEmoji = _useState2[1];\n  /** concept 2 is useState */\n\n\n  const _useState3 = useState(\"translation will appear here..\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        meaning = _useState4[0],\n        setMeaning = _useState4[1];\n\n  function changeHandler(event) {\n    const inputEmoji = event.target.value;\n    setEmoji(inputEmoji);\n\n    if (inputEmoji in emojiDictionary) {\n      setMeaning(emojiDictionary[inputEmoji]);\n    } else {\n      setMeaning(\"failure to recognise this emoji\");\n    }\n  }\n\n  function emojiClickHandler(inputEmoji) {\n    setMeaning(emojiDictionary[inputEmoji]);\n  }\n\n  return (\n    /*#__PURE__*/\n\n    /** concept 3 is onchange */\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"inside outttttt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: changeHandler,\n        value: emoji,\n        placeholder: \"Search your emoji\",\n        style: {\n          padding: \"1em\",\n          minWidth: \"80%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", emoji, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", meaning, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), \" \",\n      /** Bonus feature; if time permmits */\n\n      /**\n       * concepts to cover: mapping a list\n       * click handler on list item\n       */\n      emojis.map(emoji => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => emojiClickHandler(emoji),\n        style: {\n          fontSize: \"2rem\",\n          padding: \"0.5rem\",\n          cursor: \"pointer\"\n        },\n        children: emoji\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)).filter(e => e)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"kSlSu9MMG39KvKZAUROdoNLRrtM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Sarvesh/Desktop/New folder (6)/Neog0/Mark-8/src/App.js"],"names":["React","useState","emojiDictionary","emojis","Object","keys","App","emoji","setEmoji","meaning","setMeaning","changeHandler","event","inputEmoji","target","value","emojiClickHandler","padding","minWidth","map","fontSize","cursor","filter","e"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG;AACtB,QAAM,SADgB;AAEtB,QAAM,WAFgB;AAGtB,QAAM,KAHgB;AAItB,QAAM,aAJgB;AAKtB,QAAM,MALgB;AAMtB,QACE;AAAY;;AAPQ,CAAxB;AAUA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,eAAZ,CAAf;AAEA,eAAe,SAASI,GAAT,GAAe;AAAA;;AAAA,oBACFL,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,QACrBM,KADqB;AAAA,QACdC,QADc;AACY;;;AADZ,qBAEEP,QAAQ,CAAC,gCAAD,CAFV;AAAA;AAAA,QAErBQ,OAFqB;AAAA,QAEZC,UAFY;;AAI5B,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,UAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAhC;AACAP,IAAAA,QAAQ,CAACK,UAAD,CAAR;;AAEA,QAAIA,UAAU,IAAIX,eAAlB,EAAmC;AACjCQ,MAAAA,UAAU,CAACR,eAAe,CAACW,UAAD,CAAhB,CAAV;AACD,KAFD,MAEO;AACLH,MAAAA,UAAU,CAAC,iCAAD,CAAV;AACD;AACF;;AAED,WAASM,iBAAT,CAA2BH,UAA3B,EAAuC;AACrCH,IAAAA,UAAU,CAACR,eAAe,CAACW,UAAD,CAAhB,CAAV;AACD;;AAED;AAAA;;AACE;AACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,QAAQ,EAAEF,aADZ;AAEE,QAAA,KAAK,EAAEJ,KAFT;AAGE,QAAA,WAAW,EAAE,mBAHf;AAIE,QAAA,KAAK,EAAE;AACLU,UAAAA,OAAO,EAAE,KADJ;AAELC,UAAAA,QAAQ,EAAE;AAFL;AAJT;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE;AAAA,wBAAMX,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,oBAYE;AAAA,wBAAME,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAcI;;AACA;AACR;AACA;AACA;AACQN,MAAAA,MAAM,CACHgB,GADH,CACQZ,KAAD,iBACH;AACE,QAAA,OAAO,EAAE,MAAMS,iBAAiB,CAACT,KAAD,CADlC;AAEE,QAAA,KAAK,EAAE;AAAEa,UAAAA,QAAQ,EAAE,MAAZ;AAAoBH,UAAAA,OAAO,EAAE,QAA7B;AAAuCI,UAAAA,MAAM,EAAE;AAA/C,SAFT;AAAA,kBAIGd;AAJH;AAAA;AAAA;AAAA;AAAA,cAFJ,EASGe,MATH,CASWC,CAAD,IAAOA,CATjB,CAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAkCD;;GArDuBjB,G;;KAAAA,G","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\n/**\n * concept notes: styling in react\n */\n\n/**\n * concept of hashmap (object as hashmap)\n * O(1) and why we are doing this.\n */\nconst emojiDictionary = {\n  \"üòä\": \"Smiling\",\n  \"üò≥\": \"disbelief\",\n  \"üòî\": \"sad\",\n  \"ü•°\": \"takeout box\",\n  \"‚ù§Ô∏è\": \"love\",\n  \"üòë\":\n    \"annoyance\" /** add some more to show how the app now expands when there's new data */\n};\n\n/**\n * Bonus feature\n * converting an object to array of keys\n */\nconst emojis = Object.keys(emojiDictionary);\n\nexport default function App() {\n  const [emoji, setEmoji] = useState(\"\"); /** concept 2 is useState */\n  const [meaning, setMeaning] = useState(\"translation will appear here..\");\n\n  function changeHandler(event) {\n    const inputEmoji = event.target.value;\n    setEmoji(inputEmoji);\n\n    if (inputEmoji in emojiDictionary) {\n      setMeaning(emojiDictionary[inputEmoji]);\n    } else {\n      setMeaning(\"failure to recognise this emoji\");\n    }\n  }\n\n  function emojiClickHandler(inputEmoji) {\n    setMeaning(emojiDictionary[inputEmoji]);\n  }\n\n  return (\n    /** concept 3 is onchange */\n    <div className=\"App\">\n      <h1>inside outttttt</h1>\n      <input\n        onChange={changeHandler}\n        value={emoji}\n        placeholder={\"Search your emoji\"}\n        style={{\n          padding: \"1em\",\n          minWidth: \"80%\"\n        }}\n      />\n      <h2> {emoji} </h2> {/** Concept 1: JSX */}\n      <h3> {meaning} </h3> {/** how much part is re-rendered. */}\n      {\n        /** Bonus feature; if time permmits */\n        /**\n         * concepts to cover: mapping a list\n         * click handler on list item\n         */\n        emojis\n          .map((emoji) => (\n            <span\n              onClick={() => emojiClickHandler(emoji)}\n              style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n            >\n              {emoji}\n            </span>\n          ))\n          .filter((e) => e)\n      }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}